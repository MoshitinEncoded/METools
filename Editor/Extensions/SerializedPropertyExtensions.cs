using UnityEngine;
using UnityEditor;

namespace MoshitinEncoded.Editor
{
    public static class SerializedPropertyExtensions
    {
        public static void AddToArray(this SerializedProperty property, object value)
        {
            var newElement = property.ExpandArray();
            if (newElement != null)
            {
                newElement.boxedValue = value;
            }
        }

        public static void AddToArray(this SerializedProperty property, int value)
        {
            var newElement = property.ExpandArray();
            if (newElement != null)
            {
                newElement.intValue = value;
            }
        }

        public static void AddToArray(this SerializedProperty property, float value)
        {
            var newElement = property.ExpandArray();
            if (newElement != null)
            {
                newElement.floatValue = value;
            }
        }

        public static void AddToArray(this SerializedProperty property, string value)
        {
            var newElement = property.ExpandArray();
            if (newElement != null)
            {
                newElement.stringValue = value;
            }
        }

        public static void AddToArray(this SerializedProperty property, Vector2 value)
        {
            var newElement = property.ExpandArray();
            if (newElement != null)
            {
                newElement.vector2Value = value;
            }
        }

        public static void AddToArray(this SerializedProperty property, Vector3 value)
        {
            var newElement = property.ExpandArray();
            if (newElement != null)
            {
                newElement.vector3Value = value;
            }
        }

        public static void AddToArray(this SerializedProperty property, Object value)
        {
            var newElement = property.ExpandArray();
            if (newElement != null)
            {
                newElement.objectReferenceValue = value;
            }
        }

        /// <summary>
        /// Expands the array by 1.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="property"></param>
        /// <returns> The new property generated by the expansion. </returns>
        public static SerializedProperty ExpandArray(this SerializedProperty property)
        {
            if (!property.isArray)
            {
                Debug.LogError($"SerializedProperty {property.name} is not an array.");
                return null;
            }

            property.arraySize++;
            return property.GetArrayElementAtIndex(property.arraySize - 1);
        }

        public static bool RemoveFromArray(this SerializedProperty property, object value)
        {
            return property.RemoveFromArray(p => p.boxedValue == value);
        }

        public static bool RemoveFromArray(this SerializedProperty property, int value)
        {
            return property.RemoveFromArray(p => p.intValue == value);
        }

        public static bool RemoveFromArray(this SerializedProperty property, float value)
        {
            return property.RemoveFromArray(p => p.floatValue == value);
        }

        public static bool RemoveFromArray(this SerializedProperty property, string value)
        {
            return property.RemoveFromArray(p => p.stringValue == value);
        }

        public static bool RemoveFromArray(this SerializedProperty property, Vector2 value)
        {
            return property.RemoveFromArray(p => p.vector2Value == value);
        }

        public static bool RemoveFromArray(this SerializedProperty property, Vector3 value)
        {
            return property.RemoveFromArray(p => p.vector3Value == value);
        }

        public static bool RemoveFromArray(this SerializedProperty property, Object value)
        {
            return property.RemoveFromArray(p => p.objectReferenceValue == value);
        }

        /// <summary>
        /// Removes properties that satisfy a predicate from an array property.
        /// </summary>
        /// <param name="property"></param>
        /// <param name="predicate"></param>
        /// <returns> True if at least one property was removed. </returns>
        public static bool RemoveFromArray(this SerializedProperty property, System.Func<SerializedProperty, bool> predicate)
        {
            if (!property.isArray)
            {
                Debug.LogError($"SerializedProperty {property.name} is not an array.");
                return false;
            }

            var elementsRemoved = false;
            for (int i = property.arraySize - 1; i >= 0; i--)
            {
                if (predicate.Invoke(property.GetArrayElementAtIndex(i)))
                {
                    property.DeleteArrayElementAtIndex(i);
                    elementsRemoved = true;
                }
            }

            return elementsRemoved;
        }

        public static void ReplaceArray(this SerializedProperty property, object[] array)
        {
            property.ReplaceArray(array, (element, value) => element.boxedValue = value);
        }

        public static void ReplaceArray(this SerializedProperty property, int[] array)
        {
            property.ReplaceArray(array, (element, value) => element.intValue = value);
        }

        public static void ReplaceArray(this SerializedProperty property, float[] array)
        {
            property.ReplaceArray(array, (element, value) => element.floatValue = value);
        }

        public static void ReplaceArray(this SerializedProperty property, string[] array)
        {
            property.ReplaceArray(array, (element, value) => element.stringValue = value);
        }

        public static void ReplaceArray(this SerializedProperty property, Vector2[] array)
        {
            property.ReplaceArray(array, (element, value) => element.vector2Value = value);
        }

        public static void ReplaceArray(this SerializedProperty property, Vector3[] array)
        {
            property.ReplaceArray(array, (element, value) => element.vector3Value = value);
        }

        public static void ReplaceArray(this SerializedProperty property, Object[] array)
        {
            property.ReplaceArray(array, (element, value) => element.objectReferenceValue = value);
        }

        private static void ReplaceArray<T>(this SerializedProperty property, T[] array, System.Action<SerializedProperty, T> setValue)
        {
            if (!property.isArray)
            {
                Debug.LogError($"SerializedProperty {property.name} is not an array.");
                return;
            }

            property.ClearArray();
            for (int i = 0; i < array.Length; i++)
            {
                var value = array[i];
                property.arraySize++;
                setValue.Invoke(property.GetArrayElementAtIndex(i), value);
            }
        }
    }
}